stages:
  - "build"
  - "linting"
  - "test"
  - "deploy"

variables:
  # -------------- GitLab Configuration Variables -----------------------------
  REPO_TAG: registry.gitlab.com/${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}

  # -------------- GCP Configuration Variables --------------------------------
  GCP_AR_REGION: northamerica-northeast2-docker.pkg.dev
  PROJECT_ID: cbd3345-2-sheena
  ARTIFACT_REGISTRY_REPOSITORY: app-dev-docker
  GCP_AR_TAG: $GCP_AR_REGION/$PROJECT_ID/$ARTIFACT_REGISTRY_REPOSITORY
  SERVICE_ACCOUNT_USER: gitlab-artifact-registry@cbd3345-2-sheena.iam.gserviceaccount.com

  # --------------- Main Pipeline Configuration --------------------------------
  IMAGE_TAG: ${GCP_AR_TAG}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}
  IMAGE_NAME: "expense-tracker"
  RUNNER_TAG: gcp-runner1-linux # agent to run the pipeline
  BASE_IMAGE: "base_image"

# GitLab built-in security templates
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

.gcloud_auth:
  script:
    - gcloud config set project $PROJECT_ID
    - gcloud config set account $SERVICE_ACCOUNT_USER
    - gcloud auth configure-docker $GCP_AR_REGION

build:
  stage: "build"
  tags:
    - ${RUNNER_TAG}
  before_script:
    - gcloud auth configure-docker $GCP_AR_REGION
  script:
    - echo ${MONGO_URI} > .env
    - docker build -t ${IMAGE_TAG} --build-arg BASE_IMAGE=$GCP_AR_TAG/$BASE_IMAGE:latest -f Dockerfiles/Dockerfile .
    - docker push ${IMAGE_TAG}

isort:
  stage: linting
  image: ${IMAGE_TAG}
  script:
    - isort --check-only app.py test_app.py
  only:
    - push

black:
  stage: linting
  image: ${IMAGE_TAG}
  script:
    - black --check app.py test_app.py
  only:
    - push

flake8:
  stage: linting
  image: ${IMAGE_TAG}
  script:
    - flake8 app.py test_app.py
  only:
    - push

pylint:
  stage: linting
  image: ${IMAGE_TAG}
  script:
    - pylint app.py test_app.py
  only:
    - push

semgrep-sast:
  stage: "test"
  needs: ["isort", "black", "flake8", "pylint"]
  artifacts:
    when: always
    expire_in: 30 days


secret_detection:
  stage: "test"
  needs: ["isort", "black", "flake8", "pylint"]
  artifacts:
    when: always
    expire_in: 30 days


container_scanning:
  stage: "test"
  variables:
    CS_IMAGE: ${IMAGE_TAG}
    GIT_STRATEGY: clone
    CS_DOKCERFILE_PATH: ./Dockerfilebaseimage
  needs: ["isort", "black", "flake8", "pylint"]
  artifacts:
    when: always
    expire_in: 30 days

unit-test-job:
  stage: "test"
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

deploy:
  stage: "deploy"
  tags:
    - ${RUNNER_TAG}
  before_script:
    - gcloud auth configure-docker $GCP_AR_REGION
  script:
    - docker pull ${IMAGE_TAG}
    - docker rm -f $IMAGE_NAME
    - docker rmi $(docker images -q $GCP_AR_TAG/$IMAGE_NAME)
    - docker run -d -p 5000:5000 --name ${IMAGE_NAME} ${IMAGE_TAG}
  needs: [ "semgrep-sast", "secret_detection", "container_scanning" ]