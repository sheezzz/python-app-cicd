stages:
  - linting
  - build
  - test
  - staging

variables:
  # -------------- GitLab Configuration Variables -----------------------------
  REPO_TAG: registry.gitlab.com/${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}

  # -------------- GCP Configuration Variables --------------------------------
  GCP_AR_REGION: northamerica-northeast2-docker.pkg.dev
  PROJECT_ID: cbd3345-2-sheena
  ARTIFACT_REGISTRY_REPOSITORY: app-dev-docker
  GCP_AR_TAG: $GCP_AR_REGION/$PROJECT_ID/$ARTIFACT_REGISTRY_REPOSITORY
  SERVICE_ACCOUNT_USER: gitlab-artifact-registry@cbd3345-2-sheena.iam.gserviceaccount.com

  # --------------- Main Pipeline Configuration --------------------------------
  IMAGE_TAG: ${GCP_AR_TAG}/${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}
  IMAGE_NAME: "expense-tracker"
  RUNNER_TAG: gcp-runner1-linux
  BASE_IMAGE: "base_image"
  BASE_IMAGE_TAG: ${GCP_AR_TAG}/${BASE_IMAGE}:latest

# GitLab built-in security templates
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Jobs/Container-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

.gcloud_auth:
  script:
    - gcloud config set project $PROJECT_ID
    - gcloud config set account $SERVICE_ACCOUNT_USER
    - gcloud auth configure-docker $GCP_AR_REGION

lint-job:
  stage: "linting"
  image: python:3.9-slim
  before_script:
    - apt-get update
    - apt-get install -y make
    - make setup
  script:
    - echo "Lint test for the application..."
    - make linting

build:
  stage: "build"
  image: docker:latest
  services:
    - docker:dind
  needs:
    - "lint-job"
  tags:
    - ${RUNNER_TAG}
  before_script:
    - gcloud auth configure-docker $GCP_AR_REGION
  script:
    - echo ${PRODUCTION_MONGO_URI} >> .env
    - echo ${STAGING_MONGO_URI} >> .env
    - echo ${ENVIRONMENT} >> .env
    - docker build -t ${IMAGE_TAG} --build-arg BASE_IMAGE=$GCP_AR_TAG/$BASE_IMAGE:latest -f Dockerfiles/Dockerfile .
    - docker push ${IMAGE_TAG}

unit-test-job:
  stage: "test"
  needs:
    - "build"
  tags:
    - ${RUNNER_TAG}
  before_script:
    - gcloud auth configure-docker $GCP_AR_REGION
  script:
    - docker pull ${IMAGE_TAG}
    - docker rm -f $IMAGE_NAME
    - docker rmi $(docker images -q $GCP_AR_TAG/$IMAGE_NAME)
    - docker run --name ${IMAGE_NAME} ${IMAGE_TAG} pytest --junitxml=report.xml
    - docker cp ${IMAGE_NAME}:/api/report.xml ./report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml

container_scanning:
  variables:
    CS_IMAGE: ${BASE_IMAGE_TAG}
    CS_DOCKERFILE_PATH: ./DockerfileBaseImage
    GIT_STRATEGY: clone
    CS_REGISTRY_USER: _json_key
    CS_REGISTRY_PASSWORD: ${GCP_CREDENTIALS}
  services:
    - docker:dind
  artifacts:
    when: always
    expire_in: 30 days
  needs:
    - "build"

semgrep-sast:
  stage: "test"
  needs:
    - "build"
  artifacts:
    when: always
    expire_in: 30 days

secret_detection:
  stage: "test"
  needs:
    - "build"
  artifacts:
    when: always
    expire_in: 30 days

deploy_staging:
  stage: "staging"
  tags:
    - ${RUNNER_TAG}
  before_script:
    - gcloud auth configure-docker $GCP_AR_REGION
  script:
    - echo "Deploy to staging server"
    - echo ${ENVIRONMENT} >> .env
    - sed -i 's/^ENVIRONMENT=.*/ENVIRONMENT=staging/' .env
    - docker cp .env ${IMAGE_NAME}:/api/.env
    - docker pull ${IMAGE_TAG}
    - docker rm -f $IMAGE_NAME
    - docker rmi $(docker images -q $GCP_AR_TAG/$IMAGE_NAME)
    - docker run -d -p 5000:5000 --name ${IMAGE_NAME} ${IMAGE_TAG}
  needs: [ "semgrep-sast", "secret_detection", "container_scanning", "unit-test-job"]
  environment:
    name: staging
    url: http://34.130.28.96:5000